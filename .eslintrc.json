{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx"],
  "overrides": [{
      "files": ["*.js"],
      "parserOptions": {
        "ecmaVersion": 2020
      }
    },
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.base.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@nx/angular",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:import/recommended",
        "plugin:import/typescript"
      ],
      "plugins": ["@angular-eslint", "@typescript-eslint", "unused-imports"],
      "settings": {
        "import/resolver": {
          "typescript": {
            "alwaysTryTypes": true,
            "project": ["tsconfig.base.json"]
          }
        }
      },
      "rules": {
        "@angular-eslint/no-input-rename": "off",
        "@typescript-eslint/no-restricted-imports": [
          "warn",
          {
            "paths": [{
              "name": "@ngx-translate/core",
              "importNames": ["TranslateModule"],
              "message": "\n\nATTENTION\nPlease use TranslatePipe instead of TranslateModule for better performance and maintainability.\n\n"
            }]
          }
        ],
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "checkDynamicDependenciesExceptions": [
              "@dist-clients/members-client/common/feature"
            ],
            "depConstraints": [{
                "sourceTag": "scope:customers",
                "onlyDependOnLibsWithTags": ["scope:customers", "scope:shared"]
              },
              {
                "sourceTag": "scope:office",
                "onlyDependOnLibsWithTags": ["scope:office", "scope:channels", "scope:shared"]
              },
              {
                "sourceTag": "scope:channels",
                "onlyDependOnLibsWithTags": ["scope:channels", "scope:shared"]
              },
              {
                "sourceTag": "scope:widget",
                "onlyDependOnLibsWithTags": ["scope:widget", "scope:channels", "scope:shared"]
              },
              {
                "sourceTag": "scope:storybook",
                "onlyDependOnLibsWithTags": ["scope:shared"]
              },
              {
                "sourceTag": "scope:shared",
                "onlyDependOnLibsWithTags": ["scope:shared"]
              },
              {
                "sourceTag": "type:app",
                "onlyDependOnLibsWithTags": [
                  "type:feature",
                  "type:util",
                  "type:data-access",
                  "type:ui"
                ]
              },
              {
                "sourceTag": "type:feature",
                "onlyDependOnLibsWithTags": [
                  "type:feature",
                  "type:util",
                  "type:data-access",
                  "type:ui"
                ]
              },
              {
                "sourceTag": "type:ui",
                "onlyDependOnLibsWithTags": [
                  "type:util",
                  "type:ui",
                  "type:data-access"
                ]
              },
              {
                "sourceTag": "type:data-access",
                "onlyDependOnLibsWithTags": ["type:util", "type:data-access"]
              },
              {
                "sourceTag": "type:util",
                "onlyDependOnLibsWithTags": ["type:util"]
              }
            ]
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "no-public"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/prefer-on-push-component-change-detection": "error",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Object": {
                "message": "Avoid using the `Object` type. Did you mean `object`?"
              },
              "Function": {
                "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
              },
              "Boolean": {
                "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
              },
              "Number": {
                "message": "Avoid using the `Number` type. Did you mean `number`?"
              },
              "String": {
                "message": "Avoid using the `String` type. Did you mean `string`?"
              },
              "Symbol": {
                "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
              }
            }
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "private-field",
              "protected-field",
              "public-field",
              "constructor",
              "public-method",
              "protected-method",
              "private-method"
            ]
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": ["parameter"],
            "modifiers": ["unused"],
            "filter": {
              "regex": "^(_|_.*_)$",
              "match": true
            },
            "format": null
          },
          {
            "selector": ["property", "parameterProperty", "accessor"],
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": ["property", "parameterProperty", "accessor"],
            "modifiers": ["private", "readonly"],
            "format": ["UPPER_CASE", "camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": ["property"],
            "modifiers": ["readonly"],
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": ["objectLiteralProperty", "typeProperty"],
            "format": ["camelCase", "snake_case"]
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          }
        ],
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/default-param-last": "warn",
        "@typescript-eslint/no-empty-function": [
          "warn",
          {
            "allow": ["constructors"]
          }
        ],
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
        "@typescript-eslint/prefer-enum-initializers": "warn",
        "@typescript-eslint/unbound-method": [
          "error",
          {
            "ignoreStatic": true
          }
        ],
        "eqeqeq": [
          "error",
          "always",
          {
            "null": "ignore"
          }
        ],
        "object-shorthand": "error",
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "warn",
        "unused-imports/no-unused-vars": [
          "warn",
          {
            "argsIgnorePattern": "^(_|_.*_)$"
          }
        ],
        "import/namespace": "off",
        "import/no-useless-path-segments": "warn",
        "import/first": "warn",
        "import/newline-after-import": "warn",
        "import/order": [
          "warn",
          {
            "groups": [
              "builtin",
              "external",
              "internal",
              "parent",
              "sibling",
              "index"
            ],
            "newlines-between": "never",
            "alphabetize": {
              "order": "asc"
            }
          }
        ],
        "arrow-body-style": "warn",
        "array-bracket-spacing": "warn",
        "arrow-parens": ["warn", "as-needed"],
        "computed-property-spacing": "warn",
        "curly": ["warn", "multi-line", "consistent"],
        "max-len": [
          "warn",
          {
            "code": 140
          }
        ],
        "new-parens": "warn",
        "no-multiple-empty-lines": [
          "warn",
          {
            "max": 1
          }
        ],
        "quote-props": ["warn", "as-needed"],
        "space-before-function-paren": [
          "warn",
          {
            "anonymous": "never",
            "asyncArrow": "always",
            "named": "never"
          }
        ],
        "@typescript-eslint/array-type": "warn",
        "@typescript-eslint/brace-style": [
          "warn",
          "1tbs",
          {
            "allowSingleLine": true
          }
        ],
        "@typescript-eslint/comma-dangle": "warn",
        "@typescript-eslint/comma-spacing": "warn",
        "@typescript-eslint/func-call-spacing": "warn",
        "@typescript-eslint/keyword-spacing": "warn",
        "@typescript-eslint/lines-between-class-members": [
          "warn",
          "always",
          {
            "exceptAfterSingleLine": true
          }
        ],
        "@typescript-eslint/member-delimiter-style": "warn",
        "@typescript-eslint/object-curly-spacing": ["warn", "always"],
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/prefer-reduce-type-parameter": "warn",
        "@typescript-eslint/space-infix-ops": "warn",
        "quotes": "off",
        "@typescript-eslint/quotes": [
          "warn",
          "single",
          {
            "allowTemplateLiterals": true
          }
        ],
        "@typescript-eslint/semi": ["warn", "always"],
        "@typescript-eslint/type-annotation-spacing": "warn"
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@nx/angular-template"],
      "rules": {
        "max-len": [
          "warn",
          {
            "code": 140
          }
        ],
        "@angular-eslint/template/no-any": "error",
        "@angular-eslint/template/no-duplicate-attributes": "warn",
        "@angular-eslint/template/eqeqeq": [
          "error",
          {
            "allowNullOrUndefined": true
          }
        ],
        "@angular-eslint/template/prefer-control-flow": "warn",
        "@angular-eslint/template/prefer-self-closing-tags": "warn"
      }
    },
    {
      "files": ["*.state.ts"],
      "rules": {
        "@typescript-eslint/member-ordering": "off"
      }
    },
    {
      "files": ["*.stories.ts"],
      "rules": {
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE", "PascalCase"]
          },
          {
            "selector": ["parameter"],
            "modifiers": ["unused"],
            "filter": {
              "regex": "^(_|_.*_)$",
              "match": true
            },
            "format": null
          },
          {
            "selector": ["property", "parameterProperty", "accessor"],
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": ["property", "parameterProperty", "accessor"],
            "modifiers": ["private", "readonly"],
            "format": ["UPPER_CASE", "camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": ["property"],
            "modifiers": ["readonly"],
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": ["objectLiteralProperty", "typeProperty"],
            "format": ["camelCase", "snake_case"]
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          }
        ]
      }
    }
  ]
}